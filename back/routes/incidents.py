from flask import Blueprint, request, jsonify, current_app as app, make_response
from models import Incident, Employee
from schemas.incident_schema import IncidentSchema
from extensions import db
from flask_jwt_extended import jwt_required, get_jwt_identity
from functools import wraps
from models import Incident, Employee, IncidentStatus


incidents_bp = Blueprint('incidents', __name__)
incident_schema = IncidentSchema()
incident_list_schema = IncidentSchema(many=True)

# üîí –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_required(fn):
    @wraps(fn)
    @jwt_required()
    def wrapper(*args, **kwargs):
        user_id = get_jwt_identity()
        user = Employee.query.get(user_id)
        if not user or user.role != 'admin':
            return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"}), 403
        return fn(*args, **kwargs)
    return wrapper

# üîç –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@incidents_bp.route('/', methods=['GET'])
@admin_required
def get_all_incidents():
    incidents = Incident.query.order_by(Incident.incident_datetime.desc()).all()
    return jsonify(incident_list_schema.dump(incidents)), 200

# üîç –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∏–Ω—Ü–∏–¥–µ–Ω—Ç –ø–æ ID (–ª—é–±–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫)
@incidents_bp.route('/<int:incident_id>', methods=['GET'])
@jwt_required()
def get_incident(incident_id):
    incident = Incident.query.get_or_404(incident_id)
    return jsonify(incident_schema.dump(incident)), 200

# üÜï –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç
@incidents_bp.route('', methods=['POST'])
@admin_required
def create_incident():
    app.logger.info("üì• POST /api/incidents ‚Äî –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å")
    data = request.get_json()
    app.logger.debug(f"üîé –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–Ω–æ–≤—ã–π" (id=1)
        data['status_id'] = 1

        new_incident = incident_schema.load(data)
        db.session.add(new_incident)

        assigned_id = data.get("assigned_employee_id")
        if assigned_id:
            employee = Employee.query.get(assigned_id)
            if employee:
                app.logger.info(f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee.id} ({employee.email}) –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π")

        db.session.commit()
        app.logger.info(f"üíæ –ò–Ω—Ü–∏–¥–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ: ID {new_incident.id}")
        return incident_schema.dump(new_incident), 201

    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {str(e)}", exc_info=True)
        return jsonify({"error": str(e)}), 400


# üõ∞Ô∏è Preflight –∑–∞–ø—Ä–æ—Å (OPTIONS)
@incidents_bp.route('', methods=['OPTIONS'])
@incidents_bp.route('/<int:incident_id>', methods=['OPTIONS'])
def preflight_incident(incident_id=None):
    resp = make_response()
    resp.headers['Access-Control-Allow-Origin'] = 'http://localhost:3000'
    resp.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
    resp.headers['Access-Control-Allow-Headers'] = 'Authorization, Content-Type'
    resp.headers['Access-Control-Allow-Credentials'] = 'true'
    return resp, 200

# ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç
@incidents_bp.route('/<int:incident_id>', methods=['PUT'])
@admin_required
def update_incident(incident_id):
    app.logger.info(f"‚úèÔ∏è PUT /api/incidents/{incident_id} ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
    incident = Incident.query.get_or_404(incident_id)
    data = request.get_json()
    app.logger.debug(f"üîÑ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    try:
        updated = incident_schema.load(data, instance=incident, partial=True)
        db.session.commit()
        app.logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ID {updated.id}")
        return incident_schema.dump(updated), 200
    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}", exc_info=True)
        return jsonify({"error": str(e)}), 400

# ‚ùå –£–¥–∞–ª–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç
@incidents_bp.route('/<int:incident_id>', methods=['DELETE'])
@admin_required
def delete_incident(incident_id):
    incident = Incident.query.get_or_404(incident_id)
    db.session.delete(incident)
    db.session.commit()
    return jsonify({"message": "–ò–Ω—Ü–∏–¥–µ–Ω—Ç —É–¥–∞–ª—ë–Ω"}), 200

# üìå –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@incidents_bp.route('/<int:incident_id>/assign/<int:employee_id>', methods=['POST'])
@admin_required
def assign_incident(incident_id, employee_id):
    incident = Incident.query.get_or_404(incident_id)
    employee = Employee.query.get_or_404(employee_id)

    if incident.assigned_employee_id == employee.id:
        return jsonify({"message": "–ò–Ω—Ü–∏–¥–µ–Ω—Ç —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"}), 200

    if incident.status_id:
        status = str(incident.status.name).lower()
        if status in ['–∑–∞–∫—Ä—ã—Ç', '–∑–∞–≤–µ—Ä—à—ë–Ω']:
            return jsonify({"error": "–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç"}), 400

    incident.assigned_employee_id = employee.id
    db.session.commit()
    return jsonify({
        "message": f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω {employee.first_name} {employee.last_name}",
        "incident_id": incident.id,
        "assigned_to": employee.id
    }), 200

# üìÑ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@incidents_bp.route('/my', methods=['GET'])
@jwt_required()
def get_my_incidents():
    user_id = get_jwt_identity()
    employee = Employee.query.get_or_404(user_id)

    assigned = Incident.query.filter_by(
        assigned_employee_id=employee.id
    ).order_by(Incident.incident_datetime.desc()).all()

    return jsonify(incident_list_schema.dump(assigned)), 200

@incidents_bp.route('/<int:incident_id>/complete', methods=['POST'])
@jwt_required()
def complete_incident(incident_id):
    user_id = get_jwt_identity()
    incident = Incident.query.get_or_404(incident_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å
    if incident.assigned_employee_id != user_id:
        return jsonify({"error": "–í—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç"}), 403

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–∑–∞–≤–µ—Ä—à—ë–Ω"
    status = IncidentStatus.query.filter_by(name='–∑–∞–≤–µ—Ä—à—ë–Ω').first()
    if not status:
        return jsonify({"error": "–°—Ç–∞—Ç—É—Å '–∑–∞–≤–µ—Ä—à—ë–Ω' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"}), 500

    incident.status_id = status.id
    db.session.commit()

    return jsonify({"message": f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç #{incident.id} –∑–∞–≤–µ—Ä—à—ë–Ω"}), 200

